AWSTemplateFormatVersion: 2010-09-09
Description: My API Gateway and Lambda function

Parameters:

  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: call

  apiGatewayHTTPMethod:
    Type: String
    Default: GET


Resources:

  s3BucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Sub '${AWS::StackName}-logs'

  s3BucketWebApp:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub '${AWS::StackName}-app'
      LoggingConfiguration:
        DestinationBucketName: !Ref s3BucketLogs
      WebsiteConfiguration:
        ErrorDocument: '404.html'
        IndexDocument: 'index.html'

  s3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3BucketWebApp
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 's3:GetObject'
            Principal: '*'
            Resource: !Sub '${s3BucketWebApp.Arn}/*'

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var https = require('https');
          var fs = require('fs');
          const API_KEY = 'b10198266c287f364499880e942bef31';

          exports.handler = function(event, context, callback) {
            var options = {
              'method': 'GET',
              'hostname': 'api.openweathermap.org',
              'path': `/data/2.5/weather?q=${event.queryStringParameters.city}&appid=${API_KEY}`,
              'headers': {
              },
              'maxRedirects': 20
            };

            var req = https.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function (chunk) {
                var body = Buffer.concat(chunks);

                callback(null, {
                  "statusCode": 200,
                  "headers": {
                    "Access-Control-Allow-Headers" : "Content-Type",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                  },
                  "body": body.toString()
                });
              });

              res.on("error", function (error) {
                console.error(error);
              });
            });

            req.end();
          };
      Description: Example Lambda function
      FunctionName: !Ref AWS::StackName
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs12.x
    DependsOn:
      - apiGateway

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub '${AWS::StackName}-api'

  apiGatewayWeatherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: weather

  apiGatewayWeatherGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      ResourceId: !Ref apiGatewayWeatherResource
      RestApiId: !Ref apiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayWeatherGetMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    DependsOn:
      - apiGateway
      - lambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref lambdaFunction
      Principal: apigateway.amazonaws.com

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*'
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${lambdaFunction}'
      RetentionInDays: 90


Outputs:

  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn

  s3WebsiteURL:
    Value: !GetAtt s3BucketWebApp.WebsiteURL







